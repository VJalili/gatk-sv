name: Build Docker Images

on:
  push:
    branches:
      - master
      - fix_docker_build_action
      - test-2
    paths:
      - 'src/**'
      - 'dockerfiles/**'
      - 'scripts/docker/build_docker.py'
      - 'scripts/docker/resources.Dockerfile'
      - '.github/workflows/sv_pipeline_docker.yml'
  pull_request:
    branches:
      - master
      - fix_docker_build_action
      - test-2
    paths:
      - 'src/**'
      - 'dockerfiles/**'
      - 'scripts/docker/build_docker.py'
      - 'scripts/docker/resources.Dockerfile'
      - '.github/workflows/sv_pipeline_docker.yml'

jobs:
  test_build:
    runs-on: ubuntu-20.04
    name: Build GATK-SV Pipeline Docker Images
    env:
      GITHUB_CONTEXT: ${{ toJson(github) }}
    strategy:
      matrix:
        python-version: ['3.8']
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          # By default, this checks out only the current commit;
          # however, since a diff between the current commit and
          # the base commit is required to determined which docker
          # images to rebuild, we use the following to check out
          # the complete git history.
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install termcolor
          
      - name: Determine Commit SHAs
        id: commit_sha
        # This action determines the SHA of two commits:
        # - BASE (BASE_SHA): The commit SHA of the base branch
        #     (e.g., broadinstitute/gatk-sv:master) which the
        #     feature branch targets.
        # - HEAD (HEAD_SHA): The commit SHA of the latest commit
        #     on the feature branch.
        #
        # In the following example, BASE_SHA=B and HEAD_SHA=Z 
        #
        #     	    X---Y---Z     feature
        #          /         \
        #     A---B---C---D---E   master
        #
        # 'E' is the merge commit ('Merge pull request #0').
        #
        # This action can be invoked as a result of 
        # (a) pushing commits X, Y, or Z, or (b) pushing 
        # merge commit E (i.e., merging the PR). 
        # Depending on (a) and (b) the commit SHAs are 
        # determined differently. In case of (a), the commit 
        # SHAs are extracted from the 'event.pull_request' 
        # key in the github's context JSON. In case of (b), 
        # the commit SHAs are extracted from the list of 
        # commits recorded under the 'event' key.
        #
        # Note: Github's context JSON is printed in the
        # action's debug page.
        #
        run: |
          EVENT_NAME=$(echo "$GITHUB_CONTEXT"| jq -r '.event_name')
          echo "::debug::EVENT_NAME: $EVENT_NAME"
          
          if [[ $EVENT_NAME == "pull_request" ]]; then
            BASE_SHA=$(echo "$GITHUB_CONTEXT"| jq -r '.event.pull_request.base.sha')
            HEAD_SHA=${{ github.event.pull_request.head.sha }}
          else
            BASE_SHA=$(echo "$GITHUB_CONTEXT"| jq '.event.before' | sed 's/\"//g')
            HEAD_SHA=$(echo "$GITHUB_CONTEXT"| jq '.event.commits[].id' | tail -2 | head -1 | sed 's/\"//g')
          fi
          
          echo "::debug::BASE_SHA: $BASE_SHA"
          echo "::debug::HEAD_SHA: $HEAD_SHA"
          
          # Avail the determined commit SHAs to other steps.
          echo "::set-output name=BASE_SHA::$BASE_SHA"
          echo "::set-output name=HEAD_SHA::$HEAD_SHA"
        

      - name: Determine Target Images
        id: target_images
        # This step determines the target images to be rebuilt based
        # on the files changed between the HEAD and BASE commits, where
        # HEAD is the commit that its push triggered running this action and
        # BASE is the commit the PR is targeting. For instance, if the
        # commit changes the `dockerfiles/sv-base/Dockerfile`, then the
        # `sv-base` docker image (and all its dependencies) are rebuilt.
        #
        # This step first gets the HEAD and BASE commit SHAs from the
        # $GITHUB_CONTEXT environment variable. Then uses `git diff` to
        # determine the files changed between the commits. Based on the
        # changed files, it determines a list of docker images to be rebuilt.
        # Finally, it stores the determined docker images in $TARGETS
        # variable that can be accessed in other steps.
        run: |
          
          echo "hello"
          
          
